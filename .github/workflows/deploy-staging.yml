name: Deploy Staging

on:
  push:
    branches: [develop]

concurrency:
  group: deploy-staging
  cancel-in-progress: false

env:
  NODE_VERSION: 20

jobs:
  build-and-deploy:
    name: Build & Deploy Staging
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:packages

      - name: Build web app
        run: npm run build:web
        env:
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
          NEXT_PUBLIC_GA4_ID: ${{ secrets.GA4_ID_STAGING }}
          NEXT_PUBLIC_GTM_ID: ${{ secrets.GTM_ID_STAGING }}
          NODE_ENV: production

      - name: Build admin app
        run: npm run build:admin
        env:
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
          NEXT_PUBLIC_GA4_ID: ${{ secrets.GA4_ID_STAGING }}
          NODE_ENV: production

      - name: Build API
        run: npm run build:api
        env:
          NODE_ENV: production

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Firestore Rules
        run: |
          npm install -g firebase-tools
          firebase deploy --only firestore:rules --project ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage Rules
        run: |
          firebase deploy --only storage:rules --project ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Functions
        if: hashFiles('functions/**') != ''
        run: |
          firebase deploy --only functions --project ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_TEST }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}

      - name: Deploy Cloud Run API
        if: hashFiles('api/**') != ''
        run: |
          echo '${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT }}' > /tmp/gcloud-key.json
          gcloud auth activate-service-account --key-file /tmp/gcloud-key.json
          gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}

          # Build and deploy Cloud Run service
          gcloud run deploy piucane-api-staging \
            --source ./api \
            --region europe-west1 \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_STAGING }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY_TEST }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcloud-key.json

      - name: Update Remote Config
        run: |
          firebase remoteconfig:set remoteconfig.template.json --project ${{ secrets.FIREBASE_PROJECT_ID_STAGING }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run post-deployment smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Basic health check
          curl -f https://app.stg.piucane.com/api/health || exit 1
          curl -f https://admin.stg.piucane.com/api/health || exit 1

          echo "‚úÖ Staging deployment successful!"

      - name: Create deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Staging deployment completed successfully"
            echo "üåê App: https://app.stg.piucane.it"
            echo "üë®‚Äçüíº Admin: https://admin.stg.piucane.it"
            echo "üîó API: https://api.stg.piucane.it"
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Staging deployment ${{ job.status }}
            üåê App: https://app.stg.piucane.it
            üë®‚Äçüíº Admin: https://admin.stg.piucane.it
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}