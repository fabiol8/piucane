name: Deploy Production

on:
  push:
    branches: [main]
  release:
    types: [published]

concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  NODE_VERSION: 20

jobs:
  build-and-deploy:
    name: Build & Deploy Production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build:packages

      - name: Build web app
        run: npm run build:web
        env:
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
          NEXT_PUBLIC_GA4_ID: ${{ secrets.GA4_ID_PROD }}
          NEXT_PUBLIC_GTM_ID: ${{ secrets.GTM_ID_PROD }}
          NODE_ENV: production

      - name: Build admin app
        run: npm run build:admin
        env:
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
          NEXT_PUBLIC_GA4_ID: ${{ secrets.GA4_ID_PROD }}
          NODE_ENV: production

      - name: Build API
        run: npm run build:api
        env:
          NODE_ENV: production

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Firestore Rules
        run: |
          npm install -g firebase-tools
          firebase deploy --only firestore:rules --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage Rules
        run: |
          firebase deploy --only storage:rules --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Functions
        if: hashFiles('functions/**') != ''
        run: |
          firebase deploy --only functions --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_LIVE }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}

      - name: Deploy Cloud Run API
        if: hashFiles('api/**') != ''
        run: |
          echo '${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT }}' > /tmp/gcloud-key.json
          gcloud auth activate-service-account --key-file /tmp/gcloud-key.json
          gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID_PROD }}

          # Build and deploy Cloud Run service
          gcloud run deploy piucane-api \
            --source ./api \
            --region europe-west1 \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_PROD }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY_LIVE }},GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcloud-key.json

      - name: Update Remote Config
        run: |
          firebase remoteconfig:set remoteconfig.template.json --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run post-deployment verification
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Health checks
          curl -f https://app.piucane.it/api/health || exit 1
          curl -f https://admin.piucane.it/api/health || exit 1
          curl -f https://api.piucane.it/health || exit 1

          # Basic E2E verification
          npm run test:e2e -- --project=chromium --grep="critical-path" || exit 1

          echo "‚úÖ Production deployment verified!"

      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ Production deployment successful!

            ## What's Changed
            - Latest changes from main branch
            - All quality gates passed
            - Deployed to production infrastructure

            ## Infrastructure
            - üåê App: https://app.piucane.it
            - üë®‚Äçüíº Admin: https://admin.piucane.it
            - üîó API: https://api.piucane.it

            ## Verification
            - ‚úÖ Health checks passed
            - ‚úÖ E2E critical path tests passed
            - ‚úÖ All services operational

            Commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Update documentation
        run: |
          npm run docs:generate
          firebase deploy --only hosting:docs --project ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üöÄ Production deployment ${{ job.status }}
            üåê App: https://app.piucane.it
            üë®‚Äçüíº Admin: https://admin.piucane.it
            üîó API: https://api.piucane.it
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Performance monitoring
        run: |
          # Trigger Lighthouse monitoring
          curl -X POST "https://api.lighthouse.com/v1/projects/${{ secrets.LIGHTHOUSE_PROJECT_ID }}/runs" \
               -H "Authorization: Bearer ${{ secrets.LIGHTHOUSE_API_TOKEN }}" \
               -H "Content-Type: application/json" \
               -d '{"url": "https://app.piucane.it", "preset": "mobile"}'

          # Trigger performance alerts
          npm run monitoring:setup
        env:
          LIGHTHOUSE_API_TOKEN: ${{ secrets.LIGHTHOUSE_API_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}